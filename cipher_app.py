# cipher_app.py
import streamlit as st

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üß† –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä")
st.markdown("### –ò–∑—É—á–∏ –æ—Å–Ω–æ–≤—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–æ–≤ –¶–µ–∑–∞—Ä—è –∏ –í–∏–∂–µ–Ω–µ—Ä–∞")

# –í—ã–±–æ—Ä —à–∏—Ñ—Ä–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
cipher_type = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏ —à–∏—Ñ—Ä:",
    ("–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è", "–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞")
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è
def caesar_cipher(text, shift, mode='encrypt'):
    result = ""
    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º 'decrypt', –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–≤–∏–≥–∞
    if mode == 'decrypt':
        shift = -shift
    
    for char in text:
        if char.isalpha():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –±—É–∫–≤—ã (–¥–ª—è 'a' –∏–ª–∏ 'A')
            base = ord('–∞') if char.islower() else ord('–ê')
            # –°—á–∏—Ç–∞–µ–º —Å —É—á–µ—Ç–æ–º —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (33 –±—É–∫–≤—ã)
            shifted = (ord(char) - base + shift) % 33
            result += chr(base + shifted)
        else:
            # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –±—É–∫–≤–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            result += char
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞
def vigenere_cipher(text, key, mode='encrypt'):
    result = ""
    key_length = len(key)
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    key = key.lower()
    key_index = 0

    for char in text:
        if char.isalpha():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–¥–≤–∏–≥ –ø–æ –±—É–∫–≤–µ –∫–ª—é—á–∞
            shift = ord(key[key_index]) - ord('–∞')
            if mode == 'decrypt':
                shift = -shift
            
            base = ord('–∞') if char.islower() else ord('–ê')
            shifted = (ord(char) - base + shift) % 33
            result += chr(base + shifted)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ –∫–ª—é—á–∞, –ø–æ –∫—Ä—É–≥—É
            key_index = (key_index + 1) % key_length
        else:
            result += char
    return result

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
if cipher_type == "–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è":
    st.header("–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è")
    st.info("""
    **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –ö–∞–∂–¥–∞—è –±—É–∫–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –±—É–∫–≤—É, 
    –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π (–∫–ª—é—á) –¥–∞–ª—å—à–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ. 
    –ê–ª—Ñ–∞–≤–∏—Ç –∑–∞—Ü–∏–∫–ª–µ–Ω: –ø–æ—Å–ª–µ ¬´—è¬ª –∏–¥—ë—Ç ¬´–∞¬ª.
    """)
    
    user_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫):")
    shift = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥ —Å–¥–≤–∏–≥–∞ (–∫–ª—é—á):", min_value=1, max_value=32, value=3)
    operation = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", ("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"))
    
    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å"):
        if user_text:
            mode = 'encrypt' if operation == "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å" else 'decrypt'
            processed_text = caesar_cipher(user_text, shift, mode)
            st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            st.code(processed_text)
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")

else: # –®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞
    st.header("–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞")
    st.info("""
    **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:** –≠—Ç–æ —É—Å–ª–æ–∂–Ω–µ–Ω–Ω—ã–π —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è. 
    –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ. 
    –ö–∞–∂–¥–∞—è –±—É–∫–≤–∞ –∫–ª—é—á–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–π —Å–¥–≤–∏–≥ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±—É–∫–≤—ã –≤ —Ç–µ–∫—Å—Ç–µ.
    """)
    
    user_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫):")
    user_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):")
    operation = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", ("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"))
    
    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å"):
        if user_text and user_key:
            if not user_key.isalpha():
                st.error("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!")
            else:
                mode = 'encrypt' if operation == "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å" else 'decrypt'
                processed_text = vigenere_cipher(user_text, user_key, mode)
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
                st.code(processed_text)
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
st.markdown("---")
st.caption("–®–∫–æ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Python.")